

		primitive --- same or narrow thn that
		system class -- same class Object or it's child object 
		user defined -- same class Object or it's child object 
		system interface -- interface type of objects -- uske childs honge
		user defined interface -- interface type of objects -- uske childs honge
		system abstract class -- abstract type of objects -- uske childs honge
		user abstract class ---- abstract type of objects -- uske childs honge
		array -- array type of object
		void -- nothing

		Spring user controller method return types
			ModelAndView (Class)
			Model (Interface)
			Map
			String
			void
			View
			HttpEntity<?> or ResponseEntity<?>
			HttpHeaders
	
		
		Below are the important viewresolvers provided by spring framework:
			1.AbstractCachingViewResolver : Abstract view resolver that caches views. Often views need preparation before they can be used; extending this view resolver provides caching.
			2.XmlViewResolver : Implementation of ViewResolver that accepts a configuration file written in XML with the same DTD as Springâ€™s XML bean factories. The default configuration file is /WEB-INF/views.xml.
			3.ResourceBundleViewResolver : Implementation of ViewResolver that uses bean definitions in a ResourceBundle, specified by the bundle base name. Typically you define the bundle in a properties file, located in the classpath. The default file name is views.properties.
			4.UrlBasedViewResolver : Simple implementation of the ViewResolver interface that effects the direct resolution of logical view names to URLs, without an explicit mapping definition. This is appropriate if your logical names match the names of your view resources in a straightforward manner, without the need for arbitrary mappings.
		   *5.InternalResourceViewResolver :  Convenient subclass of UrlBasedViewResolver that supports InternalResourceView (in effect, Servlets and JSPs) and subclasses such as JstlView and TilesView. You can specify the view class for all views generated by this resolver by using setViewClass(..).
			6.VelocityViewResolver/FreeMarkerViewResolver : Convenient subclass of UrlBasedViewResolver that supports VelocityView (in effect, Velocity templates) or FreeMarkerView ,respectively, and custom subclasses of them.
			7.ContentNegotiatingViewResolver : Implementation of the ViewResolver interface that resolves a view based on the request file name or Accept header.


		Spring controller types
			MultiActionController -- user controller can be invoked by multiple actions
				one method can have many requestmappings and one controller can have many methods
			PropertiesMethodNameResolver -- key -- action name -- method name() -- controller 
			ParameterMethodNameResolver -- /person ?action=add -- /person already mapped to the controller -- call uska add method
			ParameterizableViewController -- action is directly mapped to the controller -- simplehandler us krte hai

			
		BeanNameUrlHandlerMapping example
			Maps the requested URL to the name of the cocntroller.
		ControllerClassNameHandlerMapping example
		Uses convention to map the requested URL to Controller.
		SimpleUrlHandlerMapping example
		Allow developer to specify the mapping of URL patterns and handler mappings explicitly.
		Configure the handler mapping priority
		If multiple view handler mappings are applied, you have to declare priority to avoid conflict issue.